<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.gyagoo.test.lec02.dao.RealEstateDAO">
 	<select id="selectRealEstate" resultType="com.gyagoo.test.lec02.model.RealEstate" 
 	parameterType="int">
 		SELECT
 			`id`
 			,	`realtorId`
 			,	`address`
 			,	`area`
 			,	`type`
 			,	`price`
 			,	`rentPrice`
 			,	`createdAt`
 			,	`updatedAt`
 		FROM
 			`real_estate`
 		WHERE
 			`id` = #{id}
 	</select>
 	
 	<select id="selectRentPrice" resultType="com.gyagoo.test.lec02.model.RealEstate"
 	parameterType="int">
  		SELECT
 			`id`
 			,	`realtorId`
 			,	`address`
 			,	`area`
 			,	`type`
 			,	`price`
 			,	`rentPrice`
 			,	`createdAt`
 			,	`updatedAt`
 		FROM
 			`real_estate`
 		WHERE		
 			`rentPrice` <![CDATA[ < ]]> #{rentPrice}
 			<!-- 조건을 모두 CDATA 안에 넣어도 상관 없음 -->
 	</select>
 	
 	<select id="selectAreaPrice" resultType="com.gyagoo.test.lec02.model.RealEstate" 
 	parameterType="map">
 	<!-- 파라미터 타입이 여러가지일 경우 map으로 설정하면 spring이 알아서 처리 -->
 		SELECT
 			`id`
 			,	`realtorId`
 			,	`address`
 			,	`area`
 			,	`type`
 			,	`price`
 			,	`rentPrice`
 			,	`createdAt`
 			,	`updatedAt`
 		FROM
 			`real_estate`
 		WHERE
 			`area` <![CDATA[ >= ]]> #{area}
 		AND
 			`price` <![CDATA[ <= ]]> #{price}
 		AND
 			`type` <![CDATA[ = ]]> "매매"
 		ORDER BY
 			`id` DESC	<!-- 최근 데이터가 상위에 존재하기 때문에 id 사용 -->
 	</select>
 	
 <!-- INSERT -->
 	<insert id="insertRealEstateAsObject" parameterType="com.gyagoo.test.lec02.model.RealEstate">
 		INSERT INTO `real_estate`
 		(	
 			`realtorId`
 			,	`address`
 			,	`area`
 			,	`type`
 			,	`price`
 			,	`rentPrice`
 			,	`createdAt`
 			,	`updatedAt`
 		)
 		VALUES
 		(
 			#{realtorId}
 			,	#{address}
 			,	#{area}
 			,	#{type}
 			,	#{price}
 			,	#{rentPrice}
 			,	now()
 			,	now()
 		)
 	</insert>
 	
 	<insert id="insertRealEstate" parameterType="map">
 		INSERT INTO `real_estate`
 		(	
 			`realtorId`
 			,	`address`
 			,	`area`
 			,	`type`
 			,	`price`
 			,	`rentPrice`
 			,	`createdAt`
 			,	`updatedAt`
 		)
 		VALUES
 		(
 			#{realtorId}
 			,	#{address}
 			,	#{area}
 			,	#{type}
 			,	#{price}
 			,	#{rentPrice}
 			,	now()
 			,	now()
 		) 		
 	</insert>
 	
<!-- UPDATE의 경우, UPDATE를 하게되면 query 자체가 달라지기 때문에 내가 UPDATE를 원하는 정보만 parameter를 통해 넘겨 수정하는 것이 메모리 낭비를 줄일 수 있다 ! ! ! -->
 	<update id="updateRealEstateAsObject" parameterType="map">
 		
 		UPDATE `real_estate` 
 			SET `type`=#{type}, `price`=#{price}, `updatedAt`=now()
 		WHERE
 			`id` = #{id}	
 		
 	</update>
	
	
<!-- DELETE -->
	<delete id="delRealEstate" parameterType="map">
		DELETE FROM `real_estate`
		WHERE 
			`id` = #{id}
	</delete>
 </mapper>